Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;2760;;
Array.newInstance;java.lang.Thread[];java.util.Arrays.copyOf;2760;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;2760;;
Class.forName;dacapo.Benchmark;dacapo.Benchmark.class$;439;;
Class.forName;dacapo.Benchmark;dacapo.TestHarness.class$;60;;
Class.forName;dacapo.TestHarness;dacapo.TestHarness.class$;60;;
Class.forName;dacapo.parser.Config;dacapo.TestHarness.class$;60;;
Class.forName;dacapo.xalan.XalanHarness;dacapo.TestHarness.findClass;414;;
Class.forName;java.io.File;dacapo.TestHarness.class$;60;;
Class.forName;java.io.StringWriter;org.apache.xml.utils.ObjectPool.<init>;100;;
Class.forName;java.lang.Boolean;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Byte;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Character;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Double;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Float;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Integer;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Long;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Short;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;java.lang.Thread;org.apache.xalan.processor.TransformerFactoryImpl.class$;162;;
Class.forName;java.lang.Thread;org.apache.xalan.serialize.Encodings.class$;356;;
Class.forName;java.lang.Thread;org.apache.xalan.templates.OutputProperties.class$;207;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;640;;
Class.forName;java.util.CurrencyData;java.util.Currency$1.run;128;;
Class.forName;org.apache.xalan.serialize.CharInfo;org.apache.xalan.serialize.CharInfo.class$;150;;
Class.forName;org.apache.xalan.serialize.SerializerToHTML;org.apache.xalan.serialize.SerializerFactory.getSerializer;131;;
Class.forName;org.apache.xalan.serialize.SerializerToText;org.apache.xalan.serialize.SerializerFactory.getSerializer;131;;
Class.forName;org.apache.xalan.templates.ElemApplyImport;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemApplyTemplates;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemAttribute;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemCallTemplate;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemChoose;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemComment;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemCopy;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemCopyOf;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemElement;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemExsltFuncResult;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemExsltFunction;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemExtensionDecl;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemExtensionScript;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemFallback;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemForEach;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemIf;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemLiteralResult;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemMessage;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemNumber;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemOtherwise;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemPI;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemParam;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemSort;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemTemplate;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemText;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemTextLiteral;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemUnknown;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemValueOf;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemVariable;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemWhen;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.templates.ElemWithParam;org.apache.xalan.processor.XSLTSchema.class$;333;;
Class.forName;org.apache.xalan.transformer.ResultTreeHandler;org.apache.xml.utils.ObjectPool.<init>;100;;
Class.forName;org.apache.xerces.impl.dv.ObjectFactory;org.apache.xerces.impl.dv.ObjectFactory.class$;;;
Class.forName;org.apache.xerces.parsers.ObjectFactory;org.apache.xerces.parsers.ObjectFactory.class$;;;
Class.forName;org.apache.xml.dtm.DTMManager;org.apache.xml.dtm.DTMManager.class$;470;;
Class.forName;org.apache.xml.dtm.ref.DTMManagerDefault;org.apache.xml.dtm.DTMManager.newInstance;191;;
Class.forName;org.apache.xml.utils.FastStringBuffer;org.apache.xml.utils.StringBufferPool.class$;70;;
Class.forName;org.apache.xpath.XPath;org.apache.xalan.processor.XSLTAttributeDef.class$;1481;;
Class.forName;org.apache.xpath.functions.FuncCount;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncGenerateId;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncId;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncLocalPart;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncNot;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncPosition;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncQname;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;org.apache.xpath.functions.FuncStartsWith;org.apache.xpath.compiler.FuncLoader.getFunction;143;;
Class.forName;sun.nio.cs.ISO_8859_1;sun.nio.cs.FastCharsetProvider.lookup;102;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1260;;
Class.getDeclaredField;<java.util.CurrencyData: int[] otherCurrenciesDFD>;java.util.Currency$1.run;136;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;java.util.Currency$1.run;134;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;java.util.Currency$1.run;133;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String mainTable>;java.util.Currency$1.run;129;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String otherCurrencies>;java.util.Currency$1.run;135;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;java.util.Currency$1.run;132;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;java.util.Currency$1.run;131;isAccessible=false;
Class.getDeclaredField;<java.util.CurrencyData: long[] scCutOverTimes>;java.util.Currency$1.run;130;isAccessible=false;
Class.getMethod;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.xalan.processor.TransformerFactoryImpl.<clinit>;162;isAccessible=false;
Class.getMethod;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.xalan.serialize.Encodings.loadEncodingInfo;356;isAccessible=false;
Class.getMethod;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.xalan.templates.OutputProperties.loadPropertiesFile;207;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setLevel(int)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1600;isAccessible=false;
Class.getMethod;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;org.apache.xpath.XPathContext.<init>;360;isAccessible=false;
Class.newInstance;java.io.StringWriter;org.apache.xml.utils.ObjectPool.getInstance;173;;
Class.newInstance;org.apache.xalan.processor.TransformerFactoryImpl;javax.xml.transform.FactoryFinder.newInstance;147;;
Class.newInstance;org.apache.xalan.serialize.SerializerToHTML;org.apache.xalan.serialize.SerializerFactory.getSerializer;136;;
Class.newInstance;org.apache.xalan.serialize.SerializerToText;org.apache.xalan.serialize.SerializerFactory.getSerializer;136;;
Class.newInstance;org.apache.xalan.templates.ElemApplyTemplates;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemAttribute;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemCallTemplate;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemChoose;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemCopy;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemForEach;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemIf;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemLiteralResult;org.apache.xalan.processor.ProcessorLRE.startElement;287;;
Class.newInstance;org.apache.xalan.templates.ElemMessage;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemNumber;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemOtherwise;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemParam;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemTemplate;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemText;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemValueOf;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemVariable;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemWhen;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.templates.ElemWithParam;org.apache.xalan.processor.ProcessorTemplateElem.startElement;107;;
Class.newInstance;org.apache.xalan.transformer.ResultTreeHandler;org.apache.xml.utils.ObjectPool.getInstance;173;;
Class.newInstance;org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl;org.apache.xerces.impl.dv.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xerces.jaxp.SAXParserFactoryImpl;javax.xml.parsers.FactoryFinder.newInstance;147;;
Class.newInstance;org.apache.xerces.parsers.XIncludeAwareParserConfiguration;org.apache.xerces.parsers.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xml.dtm.ref.DTMManagerDefault;org.apache.xml.dtm.DTMManager.newInstance;193;;
Class.newInstance;org.apache.xml.utils.FastStringBuffer;org.apache.xml.utils.ObjectPool.getInstance;173;;
Class.newInstance;org.apache.xml.utils.res.XResources_en;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;org.apache.xpath.functions.FuncCount;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncGenerateId;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncId;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncLocalPart;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncNot;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncPosition;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncQname;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;org.apache.xpath.functions.FuncStartsWith;org.apache.xpath.compiler.FuncLoader.getFunction;148;;
Class.newInstance;sun.nio.cs.ISO_8859_1;sun.nio.cs.FastCharsetProvider.lookup;105;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$122c60e9085464327c822b7179718c7b07181d90;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$17c1951af04c8e84f4f1579bb189ebf25779d1cc;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$1dab564015574e40c569b126f6f215fe216c3dba;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$337118177bcebb8a6e0cdfdde5901d08cc2ccead;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$37f0d14e507b6dcfc9691ca40458e3036b98525d;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$3b8f2c33180d1c8e1158a2a05ddeba3ca2622367;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$42b64c23d297617385819a4b651edf6f678f5ecc;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$5e2c74abae16cd8b13b4a8350edbb18f9ca047b7;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$67e55d3b6bc8f8565f97da966202945a4d23a53f;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$7011a9c6545f384734bbe002d2d4f9c087c9979c;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$7db69eca50cbfa083e2ccfbfc239cea03e9fa87a;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$8beb0671645c8f175668caa61b8544542aa82f5d;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$94151511edc8d53ed1cc725c341cba7034e4dab7;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$960792756015f8df2bb76000d3551fa6f6f927cd;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$9b38fc4ccf7a2d8896831b82235ac2e3bc7ffab8;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$9fb00d78349ade0178758a8399bc8336298f8c2e;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$a50d9a1264eeefb58c116dd701743935bbba8368;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$a533fee6629b8692046d34b0485dbf639c6589c2;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$c2438fcc90f73a53f8e76e5e63bd20e0ebc0ff52;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$e03921dbd1e1bedf3c187e61309c7d75cc0e1567;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$e2b758837aab6a8200de8c30371c4ca043e1357a;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$e68111c385f93a25998d8c0610291eaf6a72d1ff;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$1c49de477bb343e501d9e1494518fb04cfd81671;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$4b1461888bb282a071bc79badaf61be4908fdf33;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$5147662c3028005ccdc954972efab10106661585;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$5700addbee475abfaf076c360501ddbbfd5874c4;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$7413b4b6cf8d638bd76f8391b7dbf9f3da7d8c50;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$7494908cdf0560a6d6b5f1433e2f0901cb8b7921;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$7516e71b230f34f7772d6d11725ea863d6252366;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$78588abe0ef69ff835251e06a93419217f54d329;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$7a0c7094a150d119e48179a90ec42c142dbece7b;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$85874e7c28177d643f7671d3ad75cfa65c74c99f;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$98fe7e6ec98d4757863b670926c3c8c4de307fb5;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$a77e26751fc19635cb2cd21dae1cdf1617a427e3;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$c661bb03fe12493101301b3fc300a3ac41afed01;sun.reflect.MethodAccessorGenerator$1.run;381;;
Class.newInstance;sun.security.provider.SHA;java.security.Provider$Service.newInstance;1221;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$3.run;240;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.text.resources.FormatData_en;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.text.resources.FormatData_en_US;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2295;;
Class.newInstance;sun.util.resources.CurrencyNames_en_US;java.util.ResourceBundle$Control.newBundle;2295;;
Constructor.getModifiers;<java.io.StringWriter: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<java.io.StringWriter: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.processor.TransformerFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.serialize.SerializerToHTML: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.serialize.SerializerToHTML: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.serialize.SerializerToText: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.serialize.SerializerToText: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemAttribute: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemAttribute: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemCallTemplate: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemCallTemplate: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemChoose: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemChoose: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemCopy: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemForEach: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemIf: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemIf: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemLiteralResult: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemLiteralResult: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemMessage: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemNumber: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemOtherwise: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemOtherwise: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemParam: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemTemplate: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemTemplate: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemText: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemText: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemValueOf: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemValueOf: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemVariable: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWhen: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWhen: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWithParam: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWithParam: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.transformer.ResultTreeHandler: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.transformer.ResultTreeHandler: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.dtm.ref.DTMManagerDefault: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.dtm.ref.DTMManagerDefault: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.utils.FastStringBuffer: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.utils.res.XResources_en: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncCount: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncGenerateId: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncId: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncId: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncLocalPart: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncNot: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncPosition: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncQname: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncQname: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;30;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncStartsWith: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.nio.cs.ISO_8859_1: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$122c60e9085464327c822b7179718c7b07181d90: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$17c1951af04c8e84f4f1579bb189ebf25779d1cc: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$1dab564015574e40c569b126f6f215fe216c3dba: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$337118177bcebb8a6e0cdfdde5901d08cc2ccead: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$37f0d14e507b6dcfc9691ca40458e3036b98525d: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$3b8f2c33180d1c8e1158a2a05ddeba3ca2622367: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$42b64c23d297617385819a4b651edf6f678f5ecc: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$5e2c74abae16cd8b13b4a8350edbb18f9ca047b7: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$67e55d3b6bc8f8565f97da966202945a4d23a53f: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$7011a9c6545f384734bbe002d2d4f9c087c9979c: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$7db69eca50cbfa083e2ccfbfc239cea03e9fa87a: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$8beb0671645c8f175668caa61b8544542aa82f5d: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$94151511edc8d53ed1cc725c341cba7034e4dab7: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$960792756015f8df2bb76000d3551fa6f6f927cd: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$9b38fc4ccf7a2d8896831b82235ac2e3bc7ffab8: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$9fb00d78349ade0178758a8399bc8336298f8c2e: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$a50d9a1264eeefb58c116dd701743935bbba8368: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$a533fee6629b8692046d34b0485dbf639c6589c2: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$c2438fcc90f73a53f8e76e5e63bd20e0ebc0ff52: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$e03921dbd1e1bedf3c187e61309c7d75cc0e1567: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$e2b758837aab6a8200de8c30371c4ca043e1357a: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$e68111c385f93a25998d8c0610291eaf6a72d1ff: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$1c49de477bb343e501d9e1494518fb04cfd81671: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$4b1461888bb282a071bc79badaf61be4908fdf33: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$5147662c3028005ccdc954972efab10106661585: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$5700addbee475abfaf076c360501ddbbfd5874c4: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$7413b4b6cf8d638bd76f8391b7dbf9f3da7d8c50: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$7494908cdf0560a6d6b5f1433e2f0901cb8b7921: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$7516e71b230f34f7772d6d11725ea863d6252366: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$78588abe0ef69ff835251e06a93419217f54d329: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$7a0c7094a150d119e48179a90ec42c142dbece7b: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$85874e7c28177d643f7671d3ad75cfa65c74c99f: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$98fe7e6ec98d4757863b670926c3c8c4de307fb5: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$a77e26751fc19635cb2cd21dae1cdf1617a427e3: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$c661bb03fe12493101301b3fc300a3ac41afed01: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.SHA: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<dacapo.xalan.XalanHarness: void <init>(dacapo.parser.Config,java.io.File)>;dacapo.TestHarness.runBenchmark;270;isAccessible=false;
Constructor.newInstance;<java.io.StringWriter: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.processor.TransformerFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.serialize.SerializerToHTML: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.serialize.SerializerToText: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemAttribute: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemCallTemplate: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemChoose: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemCopy: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemForEach: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemIf: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemLiteralResult: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemMessage: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemNumber: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemOtherwise: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemParam: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemTemplate: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemText: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemValueOf: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemVariable: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemWhen: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemWithParam: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.transformer.ResultTreeHandler: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.dtm.ref.DTMManagerDefault: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.utils.FastStringBuffer: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.utils.res.XResources_en: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncCount: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncGenerateId: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncId: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncLocalPart: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncNot: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncPosition: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncQname: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncStartsWith: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.nio.cs.ISO_8859_1: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$122c60e9085464327c822b7179718c7b07181d90: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$17c1951af04c8e84f4f1579bb189ebf25779d1cc: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$1dab564015574e40c569b126f6f215fe216c3dba: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$337118177bcebb8a6e0cdfdde5901d08cc2ccead: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$37f0d14e507b6dcfc9691ca40458e3036b98525d: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$3b8f2c33180d1c8e1158a2a05ddeba3ca2622367: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$42b64c23d297617385819a4b651edf6f678f5ecc: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$5e2c74abae16cd8b13b4a8350edbb18f9ca047b7: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$67e55d3b6bc8f8565f97da966202945a4d23a53f: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$7011a9c6545f384734bbe002d2d4f9c087c9979c: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$7db69eca50cbfa083e2ccfbfc239cea03e9fa87a: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$8beb0671645c8f175668caa61b8544542aa82f5d: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$94151511edc8d53ed1cc725c341cba7034e4dab7: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$960792756015f8df2bb76000d3551fa6f6f927cd: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$9b38fc4ccf7a2d8896831b82235ac2e3bc7ffab8: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$9fb00d78349ade0178758a8399bc8336298f8c2e: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$a50d9a1264eeefb58c116dd701743935bbba8368: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$a533fee6629b8692046d34b0485dbf639c6589c2: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$c2438fcc90f73a53f8e76e5e63bd20e0ebc0ff52: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$e03921dbd1e1bedf3c187e61309c7d75cc0e1567: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$e2b758837aab6a8200de8c30371c4ca043e1357a: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$e68111c385f93a25998d8c0610291eaf6a72d1ff: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$1c49de477bb343e501d9e1494518fb04cfd81671: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$4b1461888bb282a071bc79badaf61be4908fdf33: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$5147662c3028005ccdc954972efab10106661585: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$5700addbee475abfaf076c360501ddbbfd5874c4: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$7413b4b6cf8d638bd76f8391b7dbf9f3da7d8c50: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$7494908cdf0560a6d6b5f1433e2f0901cb8b7921: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$7516e71b230f34f7772d6d11725ea863d6252366: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$78588abe0ef69ff835251e06a93419217f54d329: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$7a0c7094a150d119e48179a90ec42c142dbece7b: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$85874e7c28177d643f7671d3ad75cfa65c74c99f: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$98fe7e6ec98d4757863b670926c3c8c4de307fb5: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$a77e26751fc19635cb2cd21dae1cdf1617a427e3: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$c661bb03fe12493101301b3fc300a3ac41afed01: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData_en: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance0;;isAccessible=true;
Field.get*;<java.util.CurrencyData: int[] otherCurrenciesDFD>;java.util.Currency$1.run;136;isAccessible=false;
Field.get*;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;java.util.Currency$1.run;134;isAccessible=false;
Field.get*;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;java.util.Currency$1.run;133;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String mainTable>;java.util.Currency$1.run;129;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String otherCurrencies>;java.util.Currency$1.run;135;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;java.util.Currency$1.run;132;isAccessible=false;
Field.get*;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;java.util.Currency$1.run;131;isAccessible=false;
Field.get*;<java.util.CurrencyData: long[] scCutOverTimes>;java.util.Currency$1.run;130;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getDeclaringClass;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;25;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] otherCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String mainTable>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String otherCurrencies>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.misc.Unsafe.fieldOffset;551;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;16;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;17;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;18;isAccessible=false;
Field.getModifiers;<java.util.CurrencyData: long[] scCutOverTimes>;sun.reflect.UnsafeFieldAccessorImpl.<init>;31;isAccessible=false;
Field.getName;<java.util.CurrencyData: int[] otherCurrenciesDFD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: int[] scNewCurrenciesDFD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: int[] scOldCurrenciesDFD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String mainTable>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String otherCurrencies>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String version>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String[] scNewCurrencies>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: java.lang.String[] scOldCurrencies>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.CurrencyData: long[] scCutOverTimes>;java.lang.Class.searchFields;;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getModifiers;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<java.lang.Thread: boolean holdsLock(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean interrupted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isAlive()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isDaemon()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isInterrupted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int activeCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int countStackFrames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int enumerate(java.lang.Thread[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int getPriority()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.String getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread currentThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$State getState()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.util.Map getAllStackTraces()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: long getId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void checkAccess()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void destroy()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void dumpStack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void interrupt()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void resume()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void run()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setDaemon(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setPriority(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void sleep(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void sleep(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void start()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void stop()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void stop(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void suspend()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void yield()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void addLiteralResultAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setCdataSectionElements(java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypeSystem(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setForeignAttr(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setMediaType(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setOmitXmlDeclaration(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setStandalone(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setVersion(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void startElement(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.WhitespaceInfoPaths: void clearElements()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: org.apache.xml.utils.QName getMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void setIsDefaultTemplate(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void transformSelectedNodes(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: int getParamElemCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: org.apache.xalan.templates.ElemWithParam getParamElem(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void setParamElem(org.apache.xalan.templates.ElemWithParam)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: int getSortElemCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemSort getSortElem(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xml.dtm.DTMIterator sortNodes(org.apache.xpath.XPathContext,java.util.Vector,org.apache.xml.dtm.DTMIterator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression getExpression()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setExpression(org.apache.xpath.Expression)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setSortElem(org.apache.xalan.templates.ElemSort)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void transformSelectedNodes(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: org.apache.xpath.XPath getTest()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: boolean containsExtensionElementURI(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: boolean getIsLiteralResultAsStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: int getExtensionElementPrefixCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getExtensionElementPrefix(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getLocalName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getPrefix()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getRawName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getVersion()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.util.Enumeration enumerateLiteralResultAttributes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: org.apache.xalan.templates.AVT getLiteralResultAttribute(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void resolvePrefixTables()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setIsLiteralResultAsStylesheet(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setLocalName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setNamespace(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setRawName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setVersion(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setXmlSpace(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: boolean getTerminate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getLevel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getPreviousNode(org.apache.xpath.XPathContext,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getTargetNode(org.apache.xpath.XPathContext,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getFormat()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getGroupingSeparator()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getGroupingSize()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getLang()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getLetterValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getFrom()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setGroupingSeparator(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setGroupingSize(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setLang(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setLetterValue(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setLevel(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setValue(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: double getPriority()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: java.lang.String getPublicId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: java.lang.String getSystemId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.Stylesheet getStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.StylesheetComposed getStylesheetComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xpath.XPath getMatch()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void recompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setLocaterInfo(javax.xml.transform.SourceLocator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setPriority(double)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setStylesheet(org.apache.xalan.templates.Stylesheet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: boolean getDisableOutputEscaping()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: boolean getDisableOutputEscaping()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void setDisableOutputEscaping(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: boolean getIsTopLevel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: boolean isPsuedoVar()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: int getIndex()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xpath.objects.XObject getValue(org.apache.xalan.transformer.TransformerImpl,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void recompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setIndex(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setIsTopLevel(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: org.apache.xpath.XPath getTest()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xpath.XPath getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xpath.objects.XObject getValue(org.apache.xalan.transformer.TransformerImpl,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean containsExtensionElementURI(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean isAggregatedType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean isRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getAttributeSetCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getDecimalFormatCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getExcludeResultPrefixCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getExtensionElementPrefixCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getImportCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getIncludeCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getKeyCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getNamespaceAliasCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getOutputCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getPreserveSpaceCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getStripSpaceCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getTemplateCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getVariableOrParamCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.Object getNonXslTopLevel(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getExcludeResultPrefix(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getExtensionElementPrefix(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getHref()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getVersion()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getXmlnsXsl()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemAttributeSet getAttributeSet(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemParam getParam(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemTemplate getTemplate(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemVariable getVariable(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemVariable getVariableOrParam(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemVariable getVariableOrParam(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.KeyDeclaration getKey(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.NamespaceAlias getNamespaceAlias(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.OutputProperties getOutput(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getInclude(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getStylesheetParent()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetComposed getImport(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetComposed getStylesheetComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.WhiteSpaceInfo getPreserveSpace(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.WhiteSpaceInfo getStripSpace(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: short getNodeType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void replaceTemplate(org.apache.xalan.templates.ElemTemplate,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setAttributeSet(org.apache.xalan.templates.ElemAttributeSet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setDecimalFormat(org.apache.xalan.templates.DecimalFormatProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setHref(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setId(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setImport(org.apache.xalan.templates.StylesheetComposed)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setInclude(org.apache.xalan.templates.Stylesheet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setKey(org.apache.xalan.templates.KeyDeclaration)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setLocaterInfo(javax.xml.transform.SourceLocator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setNamespaceAlias(org.apache.xalan.templates.NamespaceAlias)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setNonXslTopLevel(org.apache.xml.utils.QName,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setOutput(org.apache.xalan.templates.OutputProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setParam(org.apache.xalan.templates.ElemParam)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setPreserveSpaces(org.apache.xalan.templates.WhiteSpaceInfo)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setStripSpaces(org.apache.xalan.templates.WhiteSpaceInfo)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setStylesheetParent(org.apache.xalan.templates.Stylesheet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setStylesheetRoot(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setTemplate(org.apache.xalan.templates.ElemTemplate)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setVariable(org.apache.xalan.templates.ElemVariable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setXmlnsXsl(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: boolean isAggregatedType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: int getEndImportCountComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: int getImportCountComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: int getIncludeCountComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: org.apache.xalan.templates.Stylesheet getIncludeComposed(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: org.apache.xalan.templates.StylesheetComposed getImportComposed(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: void recompose(java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: void recomposeTemplates(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean canStripWhiteSpace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean isOutputMethodSet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean isRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean shouldCheckWhitespace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: int getGlobalImportCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: int getImportNumber(org.apache.xalan.templates.StylesheetComposed)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.text.DecimalFormatSymbols getDecimalFormatComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Hashtable getAvailableElements()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Properties getDefaultOutputProps()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Properties getOutputProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getAttributeSetComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getExtensions()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getKeysComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: javax.xml.transform.Transformer newTransformer()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getDefaultRootRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getDefaultRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getDefaultTextRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getStartRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,boolean,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,int,int,boolean,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemVariable getVariableOrParamComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties getOutputComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed getGlobalImport(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList getTemplateListComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.WhiteSpaceInfo getWhiteSpaceInfo(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void recompose()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void setTemplateListComposed(org.apache.xalan.templates.TemplateList)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean applyTemplateToNode(org.apache.xalan.templates.ElemTemplateElement,org.apache.xalan.templates.ElemTemplate,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean currentTemplateRuleIsNull()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean elementAvailable(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean functionAvailable(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getFeature(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getProperty(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getQuietConflictWarnings()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean hasTransformThreadErrorCatcher()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean isParserEventsOnMain()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean isRecursiveAttrSet(org.apache.xalan.templates.ElemAttributeSet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean isTransformDone()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getCurrentNode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getCurrentTemplateElementsCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getMatchedNode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getRecursionLimit()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int transformToGlobalRTF(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int transformToRTF(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Exception getExceptionThrown()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Object extFunction(java.lang.String,java.lang.String,java.util.Vector,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Object getParameter(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String getBaseURLOfSource()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String getOutputProperty(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String getOutputPropertyNoDefault(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String transformToString(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Thread getTransformThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Properties getOutputProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Vector getElementCallstack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Vector getTemplateCallstack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Vector processSortKeys(org.apache.xalan.templates.ElemForEach,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;28;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.Result getOutputTarget()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.Transformer getTransformer()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.URIResolver getURIResolver()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.extensions.ExtensionsTable getExtensionsTable()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.serialize.Serializer getSerializer()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.ElemTemplate getCurrentTemplate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.ElemTemplate getMatchedTemplate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.ElemTemplateElement getCurrentElement()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.OutputProperties getOutputFormat()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.StylesheetRoot getStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.CountersTable getCountersTable()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.KeyManager getKeyManager()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.ResultTreeHandler getResultTreeHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.StackGuard getStackGuard()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.TransformSnapshot getSnapshot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.dtm.DTMIterator getContextNodeList()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.ObjectPool getStringWriterPool()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.ObjectStack getCurrentTemplateElements()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.QName getMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler createResultContentHandler(javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler createResultContentHandler(javax.xml.transform.Result,org.apache.xalan.templates.OutputProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler getContentHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler getInputContentHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler getInputContentHandler(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ext.DeclHandler getInputDeclHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ext.LexicalHandler getInputLexicalHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void clearParameters()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.w3c.dom.Node,org.apache.xml.utils.QName,org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeFromSnapshot(org.apache.xalan.transformer.TransformSnapshot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popCurrentMatched()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popCurrentTemplateRuleIsNull()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popElemAttributeSet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popElemTemplateElement()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushCurrentTemplateRuleIsNull(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushElemAttributeSet(org.apache.xalan.templates.ElemAttributeSet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushElemTemplateElement(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushMode(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushPairCurrentMatched(org.apache.xalan.templates.ElemTemplateElement,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void reset()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void resetToStylesheet(org.apache.xalan.transformer.TransformSnapshot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void run()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void runTransformThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void runTransformThread(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void runTransformThread(java.lang.Runnable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setBaseURLOfSource(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setContentHandler(org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setCurrentElement(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setErrorListener(javax.xml.transform.ErrorListener)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setExceptionThrown(java.lang.Exception)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setIsTransformDone(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputFormat(org.apache.xalan.templates.OutputProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputProperties(java.util.Properties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputProperty(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputTarget(javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setParameter(java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setParameter(java.lang.String,java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setParameters(java.util.Properties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setProperty(java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setQuietConflictWarnings(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setRecursionLimit(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setSerializer(org.apache.xalan.serialize.Serializer)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setShouldReset(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setSourceTreeDocForThread(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setStylesheet(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setThreadControler(org.apache.xalan.transformer.TransformerImpl$ThreadControler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setTransformThread(java.lang.Thread)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setURIResolver(javax.xml.transform.URIResolver)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setXMLSource(javax.xml.transform.Source)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setXPathContext(org.apache.xpath.XPathContext)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void stopTransformation()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source,javax.xml.transform.Result,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transformNode(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transformNode(int,javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void waitTransformThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.xalan.processor.TransformerFactoryImpl.<clinit>;164;isAccessible=false;
Method.invoke;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.xalan.serialize.Encodings.loadEncodingInfo;358;isAccessible=false;
Method.invoke;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.xalan.templates.OutputProperties.loadPropertiesFile;209;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setLevel(int)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1614;isAccessible=false;
Method.invoke;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;org.apache.xpath.XPathContext.getErrorListener;561;isAccessible=false;
