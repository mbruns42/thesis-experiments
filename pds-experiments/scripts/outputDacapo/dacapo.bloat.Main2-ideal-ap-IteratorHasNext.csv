Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;false;false;214762;2769;213778;984;61;4450;r0[dimensions, array, object, parent];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;false;60549;110;60160;389;3;4450;r0[dimensions, array, object, parent];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;83926;181;83926;0;4;4450;r0[stackOptimizer, owningBlock, graph, nodes, this$0];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;19095;113;19095;0;3;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;87882;225;87882;0;3;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;23210;405;23210;0;3;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;false;60438;80;60146;292;4;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r21 @ r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;14757;67;14757;0;4;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;31443;100;30250;1193;4;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;118885;89;118489;396;4;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;60976;323;59922;1054;4;4450;r24[next, parent, left, prev, right, value];
ideal-ap;IteratorHasNext;r19 @ r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;31121;299;30698;423;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r112 @ r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;632;82;195;437;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r16 @ r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;63686;57;63686;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r130 @ r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;75401;333;75021;380;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;62302;109;62302;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;45170;372;44304;866;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r159 @ r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;57888;385;57888;0;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;false;60838;50;60179;659;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r58 @ r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;61123;231;60353;770;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;27214;93;27214;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;632;75;212;420;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r210 @ r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;159297;596;158957;340;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r159 @ r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;164017;88;163369;648;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;false;60747;86;60292;455;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r154 @ r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;26119;388;26119;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;31174;663;31174;0;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;60816;53;60249;567;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;52820;56;52820;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r86 @ r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;114174;202;114174;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;31028;147;30290;738;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;61136;202;60560;576;7;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r90 @ r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;106475;214;106475;0;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r148 @ r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;26372;405;26372;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;68520;96;68520;0;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r61 @ r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60694;62;60281;413;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;53229;63;53229;0;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r93 @ r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;60516;209;60195;321;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r170 @ r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;18036;405;18036;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;18642;41;18642;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r54 @ r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;41601;976;41176;425;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r142 @ r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;30567;727;30567;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;35074;192;34691;383;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;98325;189;98325;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;90590;63;90241;349;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;false;128852;95;128601;251;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r66 @ r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;26819;391;26819;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r37 @ r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30638;63;30159;479;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;18373;308;18373;0;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;86598;133;86598;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r208 @ r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;90721;609;90145;576;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;31644;737;30718;926;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;91295;92;90649;646;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;694714;2028011;694714;0;853;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;60740;150;60310;430;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;20187;67;20187;0;4;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;94616;76;94102;514;6;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;64395;100;64395;0;3;4450;r0[params, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;false;false;121733;812;121014;719;22;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30583;123;30229;354;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r108 @ r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;532;192;158;374;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;102346;238;101783;563;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;60965;25;60638;327;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;664;336;188;476;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;60691;50;60200;491;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;31711;63;31146;565;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;61061;52;60288;773;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;31290;113;30465;825;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;61364;1696;60752;612;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;56411;87;56411;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r110 @ r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;434;137;151;283;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;46845;117;46845;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;true;128232;37;128232;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r62 @ r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;28437;33;28437;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;680735;1959931;680735;0;827;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;1750;191;509;1241;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;106839;65;106405;434;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;false;60825;85;60239;586;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;60966;105;60272;694;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;91617;195;90760;857;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;72301;405;71123;1178;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;75915;69;75915;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r98 @ r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;905;467;302;603;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;true;false;882;72;265;617;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;true;false;1180;71;706;474;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;137928;82;137482;446;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;57082;88;57082;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;94946;154;92354;2592;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r73 @ r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30882;63;30541;341;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;83569;40;83569;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;1604;412;629;975;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;23399;47;23399;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60798;123;60257;541;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;false;61968;38;61462;506;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;1009;166;314;695;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r145 @ r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;41777;8895;34188;7589;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;60734;128;60281;453;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;55669;114;55669;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r139 @ r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;111959;267;111285;674;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r29 @ r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;100679;75;100394;285;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;true;false;30943;431;30164;779;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;43426;204;42862;564;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;34607;153;33959;648;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;52737;25;52737;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;true;false;30615;73;30203;412;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;540;162;151;389;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;71734;173;71299;435;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;39919;1164;39206;713;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r226 @ r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;46948;10396;34986;11962;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;61892;64;61892;0;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30800;846;30355;445;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30586;77;30189;397;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;31108;188;30264;844;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;61035;149;60366;669;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;false;true;107058;468;107058;0;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;false;60888;67;60241;647;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;688809;2228709;688809;0;827;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;77818;62;77376;442;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;60672;50;60248;424;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r64 @ r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;63125;209;63125;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;false;61475;86;60547;928;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r126 @ r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;107808;467;107375;433;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;732332;2071133;732332;0;785;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;74693;74;74270;423;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;false;61511;44;60808;703;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;61153;64;60795;358;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r7 @ r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;70235;209;70235;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60972;178;60354;618;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r9 @ r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;35073;1271;34386;687;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30886;563;30303;583;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r88 @ r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;90919;225;90366;553;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30876;1013;30402;474;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;572;103;197;375;2;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60516;121;60232;284;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30451;142;30110;341;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;93469;385;92810;659;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;109225;39;109225;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r171 @ r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;68052;8190;63265;4787;5;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;93098;385;92615;483;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;60752;78;60270;482;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;false;62351;59;60453;1898;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;31059;67;30413;646;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;true;false;61153;316;60548;605;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;32831;89;32242;589;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;89719;5462;89719;0;67;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;60348;129;60183;165;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30291;291;30090;201;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r70 @ r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60490;100;60192;298;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;60274;63;60100;174;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;true;15994;55;15994;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30399;187;30084;315;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r33 @ r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;18567;65;18567;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;17419;211;17419;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;16242;37;16242;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;638598;2252490;638598;0;785;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r143 @ r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;60760;247;60105;655;5;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r72 @ r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;true;false;34151;2325;33686;465;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;29189;118;29189;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;21168;161;21168;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r156 @ r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;14237;405;14237;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;8537;71;8537;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r181 @ r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;77186;248;76972;214;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;false;60293;95;60080;213;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;13111;101;13111;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r25 @ r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;60316;76;60155;161;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;60310;56;60097;213;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;27639;52;27639;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30397;65;30117;280;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;82726;78;82500;226;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;90571;90;90132;439;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;642;67;212;430;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30426;65;30199;227;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;false;60765;36;60220;545;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;55915;129;55915;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60386;51;60136;250;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;365;124;112;253;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30771;161;30134;637;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;30482;798;30206;276;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;90966;148;90466;500;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;21827;79;21827;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r172 @ r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;60659;181;60087;572;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30482;105;30179;303;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r13 @ r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;false;true;21800;82;21800;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;75875;348;75875;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;14381;78;14381;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60596;107;60146;450;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r169 @ r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;9408;197;9408;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;true;54159;105;54159;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r151 @ r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;34303;8161;32157;2146;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;false;true;28040;127;28040;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;20245;53;20245;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30425;115;30082;343;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r218 @ r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;34271;11566;31749;2522;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;false;60421;51;60106;315;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;429;64;124;305;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;98129;54;97942;187;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r223 @ r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;33170;9458;31391;1779;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;9591;109;9591;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;60245;240;60062;183;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;23876;191;23876;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30477;443;30192;285;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;60563;122;60376;187;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;50393;88;50393;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;107625;120;107394;231;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60344;449;60133;211;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;true;19382;51;19382;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;60318;52;60110;208;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;21510;129;21510;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;23218;33;23218;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;true;false;30707;144;30323;384;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r11 @ r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;27785;349;27785;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;115098;120;114919;179;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;60634;80;60108;526;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;60420;36;60198;222;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;true;false;60644;127;60312;332;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;80657;265;80657;0;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;15365;104;15365;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;14704;42;14704;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;150652;206;150347;305;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;true;28285;76;28285;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;610531;456;610531;0;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r104 @ r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;489;302;141;348;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;60333;92;60130;203;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r26 @ r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;53306;63;53306;0;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;60506;50;60186;320;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;30540;145;30540;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;14729;160;14729;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;14810;79;14810;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60706;283;60138;568;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r91 @ r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;77048;52;76859;189;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;false;60387;51;60183;204;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;true;false;66360;123;66173;187;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r231 @ r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;90530;407;90121;409;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;24865;147;24865;0;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30566;1281;30176;390;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;37374;158;37088;286;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;56633;119;56633;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;911;374;291;620;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r27 @ r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30467;302;30159;308;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30742;626;30161;581;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;true;false;60784;149;60322;462;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r154 @ r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;130026;109;129421;605;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r41 @ r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;32216;109;31981;235;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;true;false;568;410;279;289;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;45374;73;45374;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;24106;123;24106;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;558;112;203;355;8;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;28353;72;28353;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;true;false;124306;142;122280;2026;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30959;67;30716;243;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;19690;357;19690;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r168 @ r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;34394;8227;32782;1612;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;true;false;30891;84;30202;689;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r94 @ r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;true;128472;254;128472;0;8;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r244 @ r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;33858;8598;31739;2119;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;27463;165;27463;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r96 @ r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;509;522;159;350;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;56498;75;56498;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30992;63;30799;193;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30667;76;30269;398;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r106 @ r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;555;247;194;361;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;465;227;138;327;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;true;false;394;71;123;271;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;13572;37;13572;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r166 @ r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;10101;398;10101;0;5;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;390;400;148;242;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;true;23950;84;23950;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r78 @ r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;60364;101;60174;190;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;71602;189;71602;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r12 @ r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;true;false;60709;192;60374;335;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;56608;31;56608;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r102 @ r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;807;357;261;546;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30565;118;30201;364;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;false;60361;113;60165;196;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r140 @ r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;95174;8936;84520;10654;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;true;false;90814;120;90463;351;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60540;449;60223;317;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;$r3 @ $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;false;true;611987;12886;611987;0;10;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r63 @ r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;30288;55;30288;0;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;514;32;90;424;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r130 @ r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;60814;91;60136;678;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r164 @ r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;64510;6972;62684;1826;5;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30290;292;30122;168;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60327;136;60103;224;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r105 @ r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;63398;103;62831;567;4;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;607;75;195;412;6;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;124779;193;124779;0;3;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;66080;11267;62565;3515;7;4450;r0[this$0, ig, nodes, map, tail, parent, left, prev, right];
