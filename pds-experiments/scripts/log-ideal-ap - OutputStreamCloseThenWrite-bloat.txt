Writing output to file outputDacapo/dacapo.bloat.Main2-ideal-ap-IO.csv
running typestate.impl.statemachines.alloc.OutputStreamStateMachine
/Users/johannesspath/Documents/dacapo/bloat/bloat.jar:/Users/johannesspath/Documents/dacapo/bloat/bloat-deps.jar
/Users/johannesspath/Documents/dacapo/bloat/bloat.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/jce.jar
[<dacapo.bloat.Main2: void main(java.lang.String[])>]
Application Classes: 361
Reachable Methods4450
Analysing 13 seeds!
Starting with seed in <dacapo.TeeOutputStream: void <init>(java.io.OutputStream,java.io.File)> r0 @ specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1)€
Alive tick 03:56:04
Starting with seed in <EDU.purdue.cs.bloat.optimize.Main: void editClass(java.lang.String)> $r15 @ specialinvoke $r15.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r119)€
Alive tick 04:00:36
Starting with seed in <dacapo.Benchmark: void <init>(dacapo.parser.Config,java.io.File)> $r12 @ specialinvoke $r12.<dacapo.TeePrintStream: void <init>(java.io.OutputStream,java.io.File)>($r14, $r13)€
Alive tick 04:00:36
Starting with seed in <EDU.purdue.cs.bloat.cfg.FlowGraph: void printGraph()> $r1 @ specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r2)€
Alive tick 04:00:37
Timeout of IDEAL, Budget:600
Starting with seed in <EDU.purdue.cs.bloat.file.ClassFile: void commitOnly(java.util.Set,java.util.Set)> $r5 @ specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r7)€
Alive tick 04:11:53
Starting with seed in <dacapo.Benchmark: void <init>(dacapo.parser.Config,java.io.File)> $r9 @ specialinvoke $r9.<dacapo.TeePrintStream: void <init>(java.io.OutputStream,java.io.File)>($r11, $r10)€
Alive tick 04:11:55
Starting with seed in <dacapo.TeePrintStream: void <init>(java.io.OutputStream,java.io.File)> $r3 @ specialinvoke $r3.<dacapo.TeeOutputStream: void <init>(java.io.OutputStream,java.io.File)>(r1, r2)€
Alive tick 04:11:55
Starting with seed in <dacapo.TeeOutputStream: void newLog()> $r2 @ specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3)€
Alive tick 04:16:27
Starting with seed in <EDU.purdue.cs.bloat.cfg.FlowGraph: void printGraph()> $r2 @ specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.lang.String)>($r10)€
Alive tick 04:25:29
Timeout of IDEAL, Budget:600
Starting with seed in <EDU.purdue.cs.bloat.file.ClassFileLoader: java.io.OutputStream outputStreamFor(java.lang.String)> $r7 @ specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r1)€
Alive tick 04:36:06
Starting with seed in <EDU.purdue.cs.bloat.optimize.Main: void editClass(java.lang.String)> $r13 @ specialinvoke $r13.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r14)€
Alive tick 04:45:39
Starting with seed in <dacapo.TeePrintStream: void <init>(java.io.OutputStream,java.io.File)> r0 @ specialinvoke r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r3)€
Alive tick 04:49:40
Starting with seed in <EDU.purdue.cs.bloat.optimize.Main: void editClass(java.lang.String)> $r14 @ specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>(r117)€
Alive tick 04:49:40
Timeout of IDEAL, Budget:600
